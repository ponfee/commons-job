// gradlew clean build -x test
// gradlew dependencies -q --configuration compile > D:/tree.txt #gradlew commons-job:dependencies

/*
./gradlew -x test sonarqube \
  -Dsonar.projectKey=commons-job \
  -Dsonar.organization=ponfee-github \
  -Dsonar.host.url=https://sonarcloud.io \
  -Dsonar.login=
*/

buildscript {
    //ext { springBootVersion = '1.5.22.RELEASE' }
    def springBootVersion = '1.5.22.RELEASE'
    repositories {
        maven { url localMavenRepo }
        mavenLocal()
        maven { url remoteMavenRepo }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.1"
    }
}

apply plugin: 'org.sonarqube'
apply plugin: 'java'
//apply plugin: 'war'
apply plugin: 'maven' // 使用maven管理jar包
apply plugin: 'idea' // apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot' // 自动打可执行jar

group = 'code.ponfee'
version = '1.0-SNAPSHOT'
sourceCompatibility = 1.8

// localMavenRepo, "${localMavenRepo}", project.localMavenRepo
def localMavenRepo=project.localMavenRepo[1..-2]
def remoteMavenRepo=project.remoteMavenRepo[1..-2]


// 若本地没有相关jar包，gradle会下载到USER_HOME/.gradle目录下；如果想让gradle下载到指定目录下，需要配置GRADLE_USER_HOME环境变量；
// USER_HOME=System.getProperty("user.home")。USER_HOME：Windows[C:/Users/username]；Linux[/home/username]
// mavenLocal()：USER_HOME/.m2/settings.xml[localRepository] > M2_HOME/conf/settings.xml[localRepository] > USER_HOME/.m2/repository
repositories {
    maven { url localMavenRepo }
    mavenLocal()
    maven { url remoteMavenRepo }
    maven { url "https://plugins.gradle.org/m2/" }
    mavenCentral()
}

bootRun {
    addResources = true // 开启页面热加载功能
}

// 用def定义的变量，使用时需要用双引号"，而不能用单引号'
def springVersion = '4.3.26.RELEASE'
def quartzVersion = '2.3.2'
dependencies {
    // spring dependency
    //implementation 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-web'

    compile 'org.springframework.boot:spring-boot-starter-aop'
    compile 'org.springframework.boot:spring-boot-configuration-processor'
    //compile 'org.springframework.boot:spring-boot-devtools' // 热部署
    testCompile 'org.springframework.boot:spring-boot-starter-test'

    compile 'mysql:mysql-connector-java:8.0.19'
    compile 'com.alibaba:druid:1.1.21'
    compile 'org.springframework.data:spring-data-redis:1.8.23.RELEASE'
    compile 'com.googlecode.log4jdbc:log4jdbc:1.2'

    //exclude group: 'org.apache.logging.log4j', module: 'log4j-api' // by group and artifact
    //exclude group: 'org.apache.logging.log4j' // by group
    //exclude module: 'log4j-api' // by artifact name
    compile('code.ponfee:commons-core:2.2-SNAPSHOT') {
        exclude group: 'org.apache.logging.log4j'
        exclude module: 'dom4j'
        exclude module: 'hessian'
        exclude module: 'fst'
        exclude module: 'itextpdf'
        exclude module: 'words-jdk16'
        exclude module: 'antlr'
        exclude module: 'chardet'
        exclude module: 'cpdetector'
        exclude module: 'third-jce'
    }
    compile('code.ponfee:commons-jedis:1.0-SNAPSHOT')
    compile "ch.qos.logback:logback-classic:1.2.3"
    compile "code.ponfee:commons-compile:1.0-SNAPSHOT"

    compile "org.springframework:spring-tx:${springVersion}"
    compile "org.springframework:spring-jdbc:$springVersion"

    // quartz
    compile("org.quartz-scheduler:quartz:$quartzVersion") {
        exclude module: 'javassist'
        exclude module: 'slf4j-api'
    }
    compile "org.quartz-scheduler:quartz-jobs:$quartzVersion"

    // protostuff序列化依赖
    compile 'io.protostuff:protostuff-runtime:1.7.0'
    compile 'io.protostuff:protostuff-core:1.7.0'

    // 通用Mapper: https://github.com/abel533/Mapper/wiki/1.integration
    compile 'tk.mybatis:mapper:4.1.5'

    // 分页插件: pagehelper.helper-dialect: mysql
    // sessionFactory.setVfs(SpringBootVFS.class);
    //compile 'com.github.pagehelper:pagehelper-spring-boot-starter:1.2.10'

    // 数据校验插件
    //compile('com.baidu.unbiz:fluent-validator-jsr303:1.0.9') {
    //    exclude module: 'slf4j-log4j12'
    //}

    testCompile  'junit:junit:4.13'
}

configurations.all {
    exclude group: 'org.apache.logging.log4j'
}

compileJava.dependsOn(processResources {
    // 用gradle命令打包的时候把资源文件编译到“/build”目录
    //from('src/main/java') {
    //    include '**/*.xml'
    //}
})

sourceSets {
    main {
        // 使用IDE开发工具（idea、eclipse）时，让资源文件编译到“/out”目录
        resources {
            srcDirs = ['src/main/java', 'src/main/resources']
        }
    }
}

// 上传Task，Gradle会生成并上传pom.xml文件
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: localMavenRepo)
            // 构造项目的Pom文件
            pom.project {
                name = project.name
                packaging = 'jar'
                description = 'simply job'
            }
        }
    }
}
